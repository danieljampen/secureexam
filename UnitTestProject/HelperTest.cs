using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.IO;
using System.Reflection;
using Ionic.Zip;

namespace SecureExam
{
    [TestClass]
    public class HelperTest
    {
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ByteArrayToHexArrayTestNull()
        {
            Helper.ByteArrayToHexString(null);
        }
        
        [TestMethod]
        public void ByteArrayToHexArrayTest()
        {
            Byte[] array = {0x20,0x20,0x25};
            Assert.AreEqual("202025",Helper.ByteArrayToHexString(array));
        }

        [TestMethod]
        public void sha256Test()
        {
            BasicSettings.getInstance().Encryption.SHA256.SaltLength = 256;
            String data = "ZHAW School of Engineering";
            Byte[] res = { 0xeb, 0xe3, 0xf3, 0x36, 0x60, 0x7e, 0xa1, 0x4f, 0x28, 0x72, 0xb7, 0x43, 0x9f, 0xb6, 0x3b, 0xc6, 0x61, 0xb0, 0x76, 0xde, 0x9f, 0x05, 0xa0, 0xa6, 0xb3, 0xdf, 0xb7, 0x1c, 0x5a, 0xf3, 0xbc, 0xa8 };
            int iterations = 10;

            Byte[] iv = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] hash = Helper.SHA256(data,iv,iterations);

            for (int i = 0; i < hash.Length; i++)
            {
                Assert.AreEqual(res[i], hash[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void sha256TestDataNull()
        {
            BasicSettings.getInstance().Encryption.SHA256.SaltLength = 256;
            String data = null;
            Byte[] res = { 0xeb, 0xe3, 0xf3, 0x36, 0x60, 0x7e, 0xa1, 0x4f, 0x28, 0x72, 0xb7, 0x43, 0x9f, 0xb6, 0x3b, 0xc6, 0x61, 0xb0, 0x76, 0xde, 0x9f, 0x05, 0xa0, 0xa6, 0xb3, 0xdf, 0xb7, 0x1c, 0x5a, 0xf3, 0xbc, 0xa8 };
            int iterations = 10;

            Byte[] iv = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] hash = Helper.SHA256(data, iv, iterations);

            for (int i = 0; i < hash.Length; i++)
            {
                Assert.AreEqual(res[i], hash[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void sha256TestIVNull()
        {
            BasicSettings.getInstance().Encryption.SHA256.SaltLength = 256;
            String data = "ZHAW School of Engineering";
            Byte[] res = { 0xeb, 0xe3, 0xf3, 0x36, 0x60, 0x7e, 0xa1, 0x4f, 0x28, 0x72, 0xb7, 0x43, 0x9f, 0xb6, 0x3b, 0xc6, 0x61, 0xb0, 0x76, 0xde, 0x9f, 0x05, 0xa0, 0xa6, 0xb3, 0xdf, 0xb7, 0x1c, 0x5a, 0xf3, 0xbc, 0xa8 };
            int iterations = 10;

            Byte[] iv = null;
            Byte[] hash = Helper.SHA256(data, iv, iterations);

            for (int i = 0; i < hash.Length; i++)
            {
                Assert.AreEqual(res[i], hash[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void sha256TestIVTooShort()
        {
            BasicSettings.getInstance().Encryption.SHA256.SaltLength = 256;
            String data = "ZHAW School of Engineering";
            Byte[] res = { 0xeb, 0xe3, 0xf3, 0x36, 0x60, 0x7e, 0xa1, 0x4f, 0x28, 0x72, 0xb7, 0x43, 0x9f, 0xb6, 0x3b, 0xc6, 0x61, 0xb0, 0x76, 0xde, 0x9f, 0x05, 0xa0, 0xa6, 0xb3, 0xdf, 0xb7, 0x1c, 0x5a, 0xf3, 0xbc, 0xa8 };
            int iterations = 10;

            Byte[] iv = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] hash = Helper.SHA256(data, iv, iterations);

            for (int i = 0; i < hash.Length; i++)
            {
                Assert.AreEqual(res[i], hash[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void sha256TestIterationsNegative()
        {
            BasicSettings.getInstance().Encryption.SHA256.SaltLength = 256;
            String data = "ZHAW School of Engineering";
            Byte[] res = { 0xeb, 0xe3, 0xf3, 0x36, 0x60, 0x7e, 0xa1, 0x4f, 0x28, 0x72, 0xb7, 0x43, 0x9f, 0xb6, 0x3b, 0xc6, 0x61, 0xb0, 0x76, 0xde, 0x9f, 0x05, 0xa0, 0xa6, 0xb3, 0xdf, 0xb7, 0x1c, 0x5a, 0xf3, 0xbc, 0xa8 };
            int iterations = -10;

            Byte[] iv = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] hash = Helper.SHA256(data, iv, iterations);

            for (int i = 0; i < hash.Length; i++)
            {
                Assert.AreEqual(res[i], hash[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void getSecureRandomBytesLengthInvalid()
        {
            Helper.getSecureRandomBytes(-2);
        }

        [TestMethod]
        public void getSecureRandomBytesTest()
        {
            int length = 32;
            Byte[] res1 = Helper.getSecureRandomBytes(length);
            Byte[] res2 = Helper.getSecureRandomBytes(length);

            bool[] equal = new bool[res1.Length]; 
            for (int i = 0; i < res1.Length; i++)
            {
                if (res1[i] == res2[i])
                {
                    equal[i] = true; 
                }
                else
                {
                    equal[i] = false; 
                }
            }

            for (int i = 0; i < equal.Length; i++)
            {
                if (equal[i] == false)
                    Assert.IsFalse(equal[i]);
            }
        }

        [TestMethod]
        public void encryptAESTest()
        {
            String data = "ZHAW School of Engineering";
            Byte[] key = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] iv = { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 };
            Byte[] res = { 0xcb, 0x4b, 0x67, 0x43, 0x8f, 0x92, 0xa5, 0xd5, 0x35, 0x4c, 0x9f, 0xb6, 0x9e, 0x66, 0x45, 0x18, 0x98, 0x63, 0xba, 0x99, 0xfe, 0x9f, 0x34, 0x2f, 0xc1, 0x6f, 0x31, 0x08, 0x97, 0x8b, 0xfb, 0x49 };

            Byte[] cipherText = Helper.encryptAES(data, key, iv);

            for (int i = 0; i < cipherText.Length; i++)
            {
                Assert.AreEqual(res[i], cipherText[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void encryptAESTestDataNull()
        {
            String data = null;
            Byte[] key = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] iv = { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 };
            Byte[] res = { 0xcb, 0x4b, 0x67, 0x43, 0x8f, 0x92, 0xa5, 0xd5, 0x35, 0x4c, 0x9f, 0xb6, 0x9e, 0x66, 0x45, 0x18, 0x98, 0x63, 0xba, 0x99, 0xfe, 0x9f, 0x34, 0x2f, 0xc1, 0x6f, 0x31, 0x08, 0x97, 0x8b, 0xfb, 0x49 };

            Byte[] cipherText = Helper.encryptAES(data, key, iv);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void encryptAESTestDataEmpty()
        {
            String data = "";
            Byte[] key = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] iv = { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 };
            Byte[] res = { 0xcb, 0x4b, 0x67, 0x43, 0x8f, 0x92, 0xa5, 0xd5, 0x35, 0x4c, 0x9f, 0xb6, 0x9e, 0x66, 0x45, 0x18, 0x98, 0x63, 0xba, 0x99, 0xfe, 0x9f, 0x34, 0x2f, 0xc1, 0x6f, 0x31, 0x08, 0x97, 0x8b, 0xfb, 0x49 };

            Byte[] cipherText = Helper.encryptAES(data, key, iv);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void encryptAESTestKeyNull()
        {
            String data = "ZHAW School of Engineering";
            Byte[] key = null;
            Byte[] iv = { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 };
            Byte[] res = { 0xcb, 0x4b, 0x67, 0x43, 0x8f, 0x92, 0xa5, 0xd5, 0x35, 0x4c, 0x9f, 0xb6, 0x9e, 0x66, 0x45, 0x18, 0x98, 0x63, 0xba, 0x99, 0xfe, 0x9f, 0x34, 0x2f, 0xc1, 0x6f, 0x31, 0x08, 0x97, 0x8b, 0xfb, 0x49 };

            Byte[] cipherText = Helper.encryptAES(data, key, iv);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void encryptAESTestKeyLengthZero()
        {
            String data = "ZHAW School of Engineering";
            Byte[] key = { };
            Byte[] iv = { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 };
            Byte[] res = { 0xcb, 0x4b, 0x67, 0x43, 0x8f, 0x92, 0xa5, 0xd5, 0x35, 0x4c, 0x9f, 0xb6, 0x9e, 0x66, 0x45, 0x18, 0x98, 0x63, 0xba, 0x99, 0xfe, 0x9f, 0x34, 0x2f, 0xc1, 0x6f, 0x31, 0x08, 0x97, 0x8b, 0xfb, 0x49 };

            Byte[] cipherText = Helper.encryptAES(data, key, iv);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void encryptAESTestIVNull()
        {
            String data = "ZHAW School of Engineering";
            Byte[] key = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] iv = null;
            Byte[] res = { 0xcb, 0x4b, 0x67, 0x43, 0x8f, 0x92, 0xa5, 0xd5, 0x35, 0x4c, 0x9f, 0xb6, 0x9e, 0x66, 0x45, 0x18, 0x98, 0x63, 0xba, 0x99, 0xfe, 0x9f, 0x34, 0x2f, 0xc1, 0x6f, 0x31, 0x08, 0x97, 0x8b, 0xfb, 0x49 };

            Byte[] cipherText = Helper.encryptAES(data, key, iv);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void encryptAESTestIVLengthZero()
        {
            String data = "ZHAW School of Engineering";
            Byte[] key = { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
            Byte[] iv = { };
            Byte[] res = { 0xcb, 0x4b, 0x67, 0x43, 0x8f, 0x92, 0xa5, 0xd5, 0x35, 0x4c, 0x9f, 0xb6, 0x9e, 0x66, 0x45, 0x18, 0x98, 0x63, 0xba, 0x99, 0xfe, 0x9f, 0x34, 0x2f, 0xc1, 0x6f, 0x31, 0x08, 0x97, 0x8b, 0xfb, 0x49 };

            Byte[] cipherText = Helper.encryptAES(data, key, iv);
        }

        [TestMethod]
        public void unzipTest()
        {
            String zipPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "/TestZip.zip";
            String unzipPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "/unzip";
            Helper.unzip(zipPath,unzipPath);
        }

        [TestMethod]
        [ExpectedException(typeof(FileNotFoundException))]
        public void unzipTestFileNotFound()
        {
            String zipPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "/TestZiiiip.zip";
            String unzipPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "/unzip";
            Helper.unzip(zipPath, unzipPath);
        }

        [TestMethod]
        [ExpectedException(typeof(ZipException))]
        public void unzipTestZipPathNull()
        {
            String zipPath = null;
            String unzipPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "/unzip";
            Helper.unzip(zipPath, unzipPath);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void unzipTestUnZipPathNull()
        {
            String zipPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "/TestZip.zip";
            String unzipPath = null;
            Helper.unzip(zipPath, unzipPath);
        }

        [TestMethod]
        public void dateTimeToMillisecondsSince1970ForJSTest()
        {
            DateTime time = new DateTime(2014, 1, 1, 20, 0, 0);
            Assert.AreEqual((double)1388602800000, Helper.dateTimeToMillisecondsSince1970ForJS(time));
        }
    }
}
